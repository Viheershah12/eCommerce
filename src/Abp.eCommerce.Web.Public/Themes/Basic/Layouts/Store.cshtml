@using Abp.eCommerce.Web.Public.Themes.Basic.Components.BlogMenu
@using Abp.eCommerce.Web.Public.Themes.Basic.Components.ContentTitle
@using Abp.eCommerce.Web.Public.Themes.Basic.Components.MainNavbar
@using Abp.eCommerce.Web.Public.Themes.Basic.Components.PageAlerts
@using Microsoft.Extensions.Options
@using System.Globalization
@using Volo.Abp.AspNetCore.Mvc.UI.Components.LayoutHook
@using Volo.Abp.AspNetCore.Mvc.UI.Layout
@using Volo.Abp.AspNetCore.Mvc.UI.Theme.Basic.Bundling
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetScripts
@using Volo.Abp.AspNetCore.Mvc.UI.Widgets.Components.WidgetStyles
@using Volo.Abp.Localization
@using Volo.Abp.Ui.Branding
@using Volo.Abp.Ui.LayoutHooks

@inject IBrandingProvider BrandingProvider
@inject IPageLayout PageLayout
@inject IOptions<AbpThemingOptions> ThemingOptions

@{
    Layout = null;
    var containerClass = ViewBag.FluidLayout == true ? "container-fluid" : "container"; //TODO: Better and type-safe options

    var pageTitle = ViewBag.Title == null ? BrandingProvider.AppName : ViewBag.Title; //TODO: Discard to get from Title

    if (PageLayout.Content.Title != null)
    {
        if (!string.IsNullOrWhiteSpace(pageTitle))
        {
            pageTitle = " | " + pageTitle;
        }

        pageTitle = PageLayout.Content.Title + pageTitle;
    }

    var rtl = CultureHelper.IsRtl ? "rtl" : string.Empty;
}

<!DOCTYPE html>

<html lang="@CultureInfo.CurrentCulture.Name" dir="@rtl">
<head>
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.First, StandardLayouts.Application)

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <title>@pageTitle</title>

    <abp-style-bundle name="@BasicThemeBundles.Styles.Global" />

    @await Component.InvokeAsync(typeof(WidgetStylesViewComponent))

    @await RenderSectionAsync("styles", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Head.Last, StandardLayouts.Application)
</head>
<body class="abp-application-layout @rtl">
    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.First, StandardLayouts.Application)

    @(await Component.InvokeAsync<MainNavbarViewComponent>())

    <!-- Mobile -->
    <div class="d-md-none p-2 text-end">
        <button class="btn btn-outline-primary" type="button" data-bs-toggle="offcanvas" data-bs-target="#mobileSidebar">
            <i class="fa-solid fa-bars"></i> Categories
        </button>
    </div>

    <div class="offcanvas offcanvas-start" tabindex="-1" id="mobileSidebar">
        <div class="offcanvas-header">
            @* <h5 class="offcanvas-title">Categories</h5> *@
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
        </div>
        <div class="offcanvas-body">
            @await Component.InvokeAsync(typeof(ProductMenuViewComponent))
        </div>
    </div>

    <!-- Desktop -->
    <div id="sidebar" class="sidebar expanded d-none d-md-block bg-light p-3 border-end shadow-sm min-vh-100 position-fixed start-0 z-1030">
        @await Component.InvokeAsync(typeof(ProductMenuViewComponent))
    </div>

    <div id="mainContent" class="main-content ms-md-320">
        <!-- Main content -->
        <div class="flex-grow-1 px-4" style="min-width: 0;">
            <div class="@containerClass py-3">
                @(await Component.InvokeAsync<PageAlertsViewComponent>())

                <div id="AbpContentToolbar" class="mb-3">
                    <div id="AbpContentToolbar" class="mb-3">
                        <div class="d-flex flex-wrap justify-content-between align-items-center">
                            <div class="flex-grow-1">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb bg-light px-3 py-2 rounded shadow-sm mb-0">

                                        <!-- Home Icon -->
                                        <li class="breadcrumb-item">
                                            <a href="/" class="text-decoration-none text-muted">
                                                <i class="fa fa-home"></i>
                                            </a>
                                        </li>

                                        <!-- Dynamic Breadcrumbs via PageLayout.Content.BreadCrumb -->
                                        @foreach (var breadcrumb in PageLayout.Content.BreadCrumb.Items)
                                        {
                                            <li class="breadcrumb-item">
                                                <a href="@breadcrumb.Url" class="text-decoration-none text-muted">
                                                    @breadcrumb.Text
                                                </a>
                                            </li>
                                        }

                                        <!-- Current Page Title -->
                                        @if (ViewBag.PageTitle != null)
                                        {
                                            <li class="breadcrumb-item active text-dark fw-semibold" aria-current="page">
                                                @ViewBag.PageTitle
                                            </li>
                                        }

                                    </ol>
                                </nav>
                            </div>

                            <div class="text-end">
                                @await RenderSectionAsync("content_toolbar", false)
                            </div>
                        </div>
                    </div>
                </div>

                @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.First, StandardLayouts.Application)

                @RenderBody()

                @await Component.InvokeLayoutHookAsync(LayoutHooks.PageContent.Last, StandardLayouts.Application)
            </div>
        </div>
    </div>

    <abp-script-bundle name="@BasicThemeBundles.Scripts.Global" />

    <script src="~/Abp/ApplicationLocalizationScript?cultureName=@CultureInfo.CurrentUICulture.Name"></script>
    <script src="~/Abp/ApplicationConfigurationScript"></script>
    <script src="~/Abp/ServiceProxyScript"></script>

    @await Component.InvokeAsync(typeof(WidgetScriptsViewComponent))

    @await RenderSectionAsync("scripts", false)

    @await Component.InvokeLayoutHookAsync(LayoutHooks.Body.Last, StandardLayouts.Application)
</body>
</html>

