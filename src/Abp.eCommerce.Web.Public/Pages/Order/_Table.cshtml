@using Abp.eCommerce.Enums
@using Abp.eCommerce.Localization
@using Abp.eCommerce.Models
@using Abp.eCommerce.Web.Public.Models.Order
@using Abp.eCommerce.Web.Public.Pages.Shared.Components.Pagination
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<eCommerceResource> L

@model (BasePagedModel<OrderItemViewModel> PagedObject, OrderStatus? status)

@functions {
    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => "warning",
            "Processing" => "info",
            "Completed" => "success",
            "Cancelled" => "danger",
            _ => "secondary"
        };
    }
}

@if (Model.PagedObject.TotalCount == 0)
{
    <div class="alert alert-warning d-flex align-items-center" role="alert">
        <i class="fas fa-info-circle me-2"></i> @L["YouHaveNoOrders"]
    </div>
}
else
{
    <div class="row g-4">
        @foreach (var order in Model.PagedObject.Items)
        {
            <div class="col-md-6 col-lg-4">
                <div class="card h-100 shadow-sm border-0 rounded-4 hover-shadow">
                    <div class="card-body d-flex flex-column justify-content-between">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <div>
                                <h6 class="text-muted mb-1">Placed on</h6>
                                <h5 class="fw-semibold">@order.CreationTime.ToString("dd MMM yyyy")</h5>
                            </div>
                            <span class="badge bg-@GetStatusColor(order.Status.GetDescription()) text-uppercase px-3 py-2 rounded-pill">
                                @order.Status
                            </span>
                        </div>

                        <hr class="my-3" />

                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="fw-semibold">@L["Total"]:</span>
                                    <div class="text-dark">Ksh @order.TotalAmount.ToString("N0")</div>
                                </div>

                                @if (order.PaymentStatus == PaymentStatus.Paid)
                                {
                                    <div class="text-end">
                                        <span class="fw-semibold">@L["Payment"]:</span>
                                        <div class="text-success">@order.PaymentMethod?.GetDescription().LocalizedEnum(L)</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="d-flex justify-content-center gap-2">
                            <a href="/Order/Detail/@order.Id" class="btn btn-sm btn-primary rounded-pill px-4">
                                <i class="fas fa-eye me-1"></i> @L["ViewDetail"]
                            </a>

                            @if (order.Status == OrderStatus.Pending || order.Status == OrderStatus.Processing)
                            {
                                <button class="btn btn-sm btn-outline-danger rounded-pill px-4 cancel-order-btn" data-id="@order.Id">
                                    <i class="fas fa-times me-1"></i> @L["Cancel"]
                                </button>
                            }
                        </div>                        
                    </div>
                </div>
            </div>
        }
    </div>

    @(await Component.InvokeAsync<PaginationViewComponent>(new { result = Model.PagedObject, page = "Order/Index", pageHandler = "Paginate", partialId = "#orderTable", data = new { Status = Model.status } }))
}