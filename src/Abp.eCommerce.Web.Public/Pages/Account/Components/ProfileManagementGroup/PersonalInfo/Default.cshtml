@using Volo.Abp.Account.Localization
@using Volo.Abp.Users
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.Extensions.Localization
@using Volo.Abp.Account.Web.Pages.Account.Components.ProfileManagementGroup.PersonalInfo
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Alert
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Button
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Form
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Grid
@using Volo.Abp.AspNetCore.Mvc.UI.Theming
@using Volo.Abp.Data
@using Volo.Abp.Identity.Settings
@using Volo.Abp.Localization
@using Volo.Abp.ObjectExtending
@using Volo.Abp.Settings

@inject IStringLocalizer<AccountResource> L
@inject ICurrentUser CurrentUser
@inject ISettingProvider SettingManager
@inject IThemeManager ThemeManager
@inject IStringLocalizerFactory StringLocalizerFactory
@model Abp.eCommerce.Web.Public.Pages.Account.Components.ProfileManagementGroup.PersonalInfo.AccountProfilePersonalInfoManagementGroupViewComponent.PersonalInfoModel

@{
    var isUserNameUpdateEnabled = string.Equals(await SettingManager.GetOrNullAsync(IdentitySettingNames.User.IsUserNameUpdateEnabled), "true",
        StringComparison.OrdinalIgnoreCase);

    var isEmailUpdateEnabled = string.Equals(await SettingManager.GetOrNullAsync(IdentitySettingNames.User.IsEmailUpdateEnabled), "true",
        StringComparison.OrdinalIgnoreCase);
}

<h4 class="text-primary fw-semibold">
    <i class="fa fa-user-edit me-2"></i>@L["PersonalSettings"]
</h4>
<hr class="mb-4" />

<form method="post" id="PersonalSettingsForm" class="needs-validation" novalidate>
    <input asp-for="ConcurrencyStamp" type="hidden" />

    <abp-row class="gy-1">
        <abp-column size-md="_6">
            <abp-input asp-for="UserName"
                label="@L["Username"]" floating-label="true" abp-auto-focus="true" readonly="!isUserNameUpdateEnabled" />
        </abp-column>

        <abp-column size-md="_6">
            <abp-input asp-for="Name"
                label="@L["Name"]" floating-label="true" />
        </abp-column>

        <abp-column size-md="_6">
            <abp-input asp-for="Surname"
                       label="@L["Surname"]" floating-label="true" />
        </abp-column>

        <abp-column size-md="_6">
            <abp-input asp-for="Email"
                       label="@L["EmailAddress"]"
                       readonly="!isEmailUpdateEnabled" floating-label="true" />
        </abp-column>

        <abp-column size-md="_6">
            <abp-input asp-for="PhoneNumber"
                       label="@L["PhoneNumber"]" floating-label="true" />
        </abp-column>

        @foreach (var propertyInfo in ObjectExtensionManager.Instance.GetProperties<AccountProfilePersonalInfoManagementGroupViewComponent.PersonalInfoModel>())
        {
            var isAllowed = propertyInfo.Configuration.GetOrDefault(IdentityModuleExtensionConsts.ConfigurationNames.AllowUserToEdit);
            if (isAllowed == null || !isAllowed.Equals(true)) continue;

            <abp-column size-md="_6">
                @if (!propertyInfo.Name.EndsWith("_Text"))
                {
                    if (propertyInfo.Type.IsEnum || !propertyInfo.Lookup.Url.IsNullOrEmpty())
                    {
                        if (propertyInfo.Type.IsEnum)
                        {
                            Model.ExtraProperties.ToEnum(propertyInfo.Name, propertyInfo.Type);
                        }

                        <abp-select asp-for="ExtraProperties[propertyInfo.Name]"
                                    name="ExtraProperties.@propertyInfo.Name"
                                    label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                                    autocomplete-api-url="@propertyInfo.Lookup.Url"
                                    autocomplete-selected-item-name="@Model.GetProperty(propertyInfo.Name + "_Text")"
                                    autocomplete-selected-item-value="@Model.GetProperty(propertyInfo.Name)"
                                    autocomplete-filter-param-name="@propertyInfo.Lookup.FilterParamName"
                                    autocomplete-items-property-name="@propertyInfo.Lookup.ResultListPropertyName"
                                    autocomplete-display-property-name="@propertyInfo.Lookup.DisplayPropertyName"
                                    autocomplete-value-property-name="@propertyInfo.Lookup.ValuePropertyName" floating-label="true">
                        </abp-select>
                    }
                    else
                    {
                        <abp-input type="@propertyInfo.GetInputType()"
                                   asp-for="ExtraProperties[propertyInfo.Name]"
                                   name="ExtraProperties.@propertyInfo.Name"
                                   label="@propertyInfo.GetLocalizedDisplayName(StringLocalizerFactory)"
                                   asp-format="@propertyInfo.GetInputFormatOrNull()"
                                   value="@propertyInfo.GetInputValueOrNull(Model.GetProperty(propertyInfo.Name))" floating-label="true" />
                    }
                }
            </abp-column>
        }
    </abp-row>

    <div class="text-end mt-4">
        <abp-button type="submit"
                    button-type="Primary"
                    class="rounded-pill px-4 py-2 shadow"
                    text="@L["Save"].Value" />
    </div>
</form>